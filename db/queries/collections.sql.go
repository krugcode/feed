// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: collections.sql

package queries

import (
	"context"
	"database/sql"
)

const AddPostToCollection = `-- name: AddPostToCollection :one
INSERT INTO collection_posts (
    id, collection_id, post_id, "order", created
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING id, collection_id, post_id, "order", created
`

type AddPostToCollectionParams struct {
	ID           string        `json:"id"`
	CollectionID string        `json:"collection_id"`
	PostID       string        `json:"post_id"`
	Order        sql.NullInt64 `json:"order"`
	Created      sql.NullTime  `json:"created"`
}

func (q *Queries) AddPostToCollection(ctx context.Context, arg AddPostToCollectionParams) (CollectionPost, error) {
	row := q.db.QueryRowContext(ctx, AddPostToCollection,
		arg.ID,
		arg.CollectionID,
		arg.PostID,
		arg.Order,
		arg.Created,
	)
	var i CollectionPost
	err := row.Scan(
		&i.ID,
		&i.CollectionID,
		&i.PostID,
		&i.Order,
		&i.Created,
	)
	return i, err
}

const CreateCollection = `-- name: CreateCollection :one
INSERT INTO collections (
    id, title, slug, description, collection_description_post_id, clicked_count, created
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
) RETURNING id, title, slug, description, collection_description_post_id, clicked_count, created
`

type CreateCollectionParams struct {
	ID                          string        `json:"id"`
	Title                       string        `json:"title"`
	Slug                        string        `json:"slug"`
	Description                 string        `json:"description"`
	CollectionDescriptionPostID *string       `json:"collection_description_post_id"`
	ClickedCount                sql.NullInt64 `json:"clicked_count"`
	Created                     sql.NullTime  `json:"created"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, CreateCollection,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.CollectionDescriptionPostID,
		arg.ClickedCount,
		arg.Created,
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.CollectionDescriptionPostID,
		&i.ClickedCount,
		&i.Created,
	)
	return i, err
}

const DeleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections WHERE id = ?
`

func (q *Queries) DeleteCollection(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteCollection, id)
	return err
}

const GetCollection = `-- name: GetCollection :one
SELECT id, title, slug, description, collection_description_post_id, clicked_count, created FROM collections WHERE id = ?
`

func (q *Queries) GetCollection(ctx context.Context, id string) (Collection, error) {
	row := q.db.QueryRowContext(ctx, GetCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.CollectionDescriptionPostID,
		&i.ClickedCount,
		&i.Created,
	)
	return i, err
}

const GetCollectionBySlug = `-- name: GetCollectionBySlug :one
SELECT id, title, slug, description, collection_description_post_id, clicked_count, created FROM collections WHERE slug = ?
`

func (q *Queries) GetCollectionBySlug(ctx context.Context, slug string) (Collection, error) {
	row := q.db.QueryRowContext(ctx, GetCollectionBySlug, slug)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.CollectionDescriptionPostID,
		&i.ClickedCount,
		&i.Created,
	)
	return i, err
}

const GetCollectionPosts = `-- name: GetCollectionPosts :many
SELECT p.id, p.type, p.visible, p.title, p.subtitle, p.content, p.slug, p.permalink, p.created FROM posts p
JOIN collection_posts cp ON p.id = cp.post_id
WHERE cp.collection_id = ?
ORDER BY cp."order", cp.created
`

func (q *Queries) GetCollectionPosts(ctx context.Context, collectionID string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, GetCollectionPosts, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Visible,
			&i.Title,
			&i.Subtitle,
			&i.Content,
			&i.Slug,
			&i.Permalink,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const IncrementCollectionClicks = `-- name: IncrementCollectionClicks :exec
UPDATE collections 
SET clicked_count = clicked_count + 1 
WHERE id = ?
`

func (q *Queries) IncrementCollectionClicks(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, IncrementCollectionClicks, id)
	return err
}

const ListCollections = `-- name: ListCollections :many
SELECT id, title, slug, description, collection_description_post_id, clicked_count, created FROM collections 
ORDER BY clicked_count DESC, created DESC 
LIMIT ? OFFSET ?
`

type ListCollectionsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListCollections(ctx context.Context, arg ListCollectionsParams) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, ListCollections, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.CollectionDescriptionPostID,
			&i.ClickedCount,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemovePostFromCollection = `-- name: RemovePostFromCollection :exec
DELETE FROM collection_posts 
WHERE collection_id = ? AND post_id = ?
`

type RemovePostFromCollectionParams struct {
	CollectionID string `json:"collection_id"`
	PostID       string `json:"post_id"`
}

func (q *Queries) RemovePostFromCollection(ctx context.Context, arg RemovePostFromCollectionParams) error {
	_, err := q.db.ExecContext(ctx, RemovePostFromCollection, arg.CollectionID, arg.PostID)
	return err
}

const SearchCollections = `-- name: SearchCollections :many
SELECT id, title, slug, description, collection_description_post_id, clicked_count, created FROM collections 
WHERE title LIKE ? OR description LIKE ?
ORDER BY clicked_count DESC, created DESC 
LIMIT ? OFFSET ?
`

type SearchCollectionsParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Limit       int64  `json:"limit"`
	Offset      int64  `json:"offset"`
}

func (q *Queries) SearchCollections(ctx context.Context, arg SearchCollectionsParams) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, SearchCollections,
		arg.Title,
		arg.Description,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.CollectionDescriptionPostID,
			&i.ClickedCount,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCollection = `-- name: UpdateCollection :one
UPDATE collections 
SET 
    title = COALESCE(?, title),
    slug = COALESCE(?, slug),
    description = COALESCE(?, description),
    collection_description_post_id = COALESCE(?, collection_description_post_id),
    clicked_count = COALESCE(?, clicked_count)
WHERE id = ?
RETURNING id, title, slug, description, collection_description_post_id, clicked_count, created
`

type UpdateCollectionParams struct {
	Title                       string        `json:"title"`
	Slug                        string        `json:"slug"`
	Description                 string        `json:"description"`
	CollectionDescriptionPostID *string       `json:"collection_description_post_id"`
	ClickedCount                sql.NullInt64 `json:"clicked_count"`
	ID                          string        `json:"id"`
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, UpdateCollection,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.CollectionDescriptionPostID,
		arg.ClickedCount,
		arg.ID,
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.CollectionDescriptionPostID,
		&i.ClickedCount,
		&i.Created,
	)
	return i, err
}

const UpdatePostOrderInCollection = `-- name: UpdatePostOrderInCollection :exec
UPDATE collection_posts 
SET "order" = ? 
WHERE collection_id = ? AND post_id = ?
`

type UpdatePostOrderInCollectionParams struct {
	Order        sql.NullInt64 `json:"order"`
	CollectionID string        `json:"collection_id"`
	PostID       string        `json:"post_id"`
}

func (q *Queries) UpdatePostOrderInCollection(ctx context.Context, arg UpdatePostOrderInCollectionParams) error {
	_, err := q.db.ExecContext(ctx, UpdatePostOrderInCollection, arg.Order, arg.CollectionID, arg.PostID)
	return err
}
