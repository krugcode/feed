// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package queries

import (
	"context"
	"database/sql"
)

const CountPosts = `-- name: CountPosts :one
SELECT COUNT(*) FROM posts WHERE visible = ?
`

func (q *Queries) CountPosts(ctx context.Context, visible sql.NullBool) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPosts, visible)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountPostsByType = `-- name: CountPostsByType :one
SELECT COUNT(*) FROM posts WHERE type = ? AND visible = ?
`

type CountPostsByTypeParams struct {
	Type    sql.NullString `json:"type"`
	Visible sql.NullBool   `json:"visible"`
}

func (q *Queries) CountPostsByType(ctx context.Context, arg CountPostsByTypeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPostsByType, arg.Type, arg.Visible)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePost = `-- name: CreatePost :one
INSERT INTO posts (
    id, type, visible, title, subtitle, content, slug, permalink, created
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, type, visible, title, subtitle, content, slug, permalink, created
`

type CreatePostParams struct {
	ID        string         `json:"id"`
	Type      sql.NullString `json:"type"`
	Visible   sql.NullBool   `json:"visible"`
	Title     string         `json:"title"`
	Subtitle  sql.NullString `json:"subtitle"`
	Content   string         `json:"content"`
	Slug      string         `json:"slug"`
	Permalink string         `json:"permalink"`
	Created   sql.NullTime   `json:"created"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, CreatePost,
		arg.ID,
		arg.Type,
		arg.Visible,
		arg.Title,
		arg.Subtitle,
		arg.Content,
		arg.Slug,
		arg.Permalink,
		arg.Created,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Visible,
		&i.Title,
		&i.Subtitle,
		&i.Content,
		&i.Slug,
		&i.Permalink,
		&i.Created,
	)
	return i, err
}

const DeletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeletePost, id)
	return err
}

const GetPost = `-- name: GetPost :one
SELECT id, type, visible, title, subtitle, content, slug, permalink, created FROM posts WHERE id = ?
`

func (q *Queries) GetPost(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, GetPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Visible,
		&i.Title,
		&i.Subtitle,
		&i.Content,
		&i.Slug,
		&i.Permalink,
		&i.Created,
	)
	return i, err
}

const GetPostByPermalink = `-- name: GetPostByPermalink :one
SELECT id, type, visible, title, subtitle, content, slug, permalink, created FROM posts WHERE permalink = ?
`

func (q *Queries) GetPostByPermalink(ctx context.Context, permalink string) (Post, error) {
	row := q.db.QueryRowContext(ctx, GetPostByPermalink, permalink)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Visible,
		&i.Title,
		&i.Subtitle,
		&i.Content,
		&i.Slug,
		&i.Permalink,
		&i.Created,
	)
	return i, err
}

const GetPostBySlug = `-- name: GetPostBySlug :one
SELECT id, type, visible, title, subtitle, content, slug, permalink, created FROM posts WHERE slug = ?
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRowContext(ctx, GetPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Visible,
		&i.Title,
		&i.Subtitle,
		&i.Content,
		&i.Slug,
		&i.Permalink,
		&i.Created,
	)
	return i, err
}

const GetRecentPosts = `-- name: GetRecentPosts :many
SELECT id, type, visible, title, subtitle, content, slug, permalink, created FROM posts 
WHERE visible = true 
ORDER BY created DESC 
LIMIT ?
`

func (q *Queries) GetRecentPosts(ctx context.Context, limit int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, GetRecentPosts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Visible,
			&i.Title,
			&i.Subtitle,
			&i.Content,
			&i.Slug,
			&i.Permalink,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPosts = `-- name: ListPosts :many
SELECT id, type, visible, title, subtitle, content, slug, permalink, created FROM posts 
WHERE visible = ? 
ORDER BY created DESC 
LIMIT ? OFFSET ?
`

type ListPostsParams struct {
	Visible sql.NullBool `json:"visible"`
	Limit   int64        `json:"limit"`
	Offset  int64        `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, ListPosts, arg.Visible, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Visible,
			&i.Title,
			&i.Subtitle,
			&i.Content,
			&i.Slug,
			&i.Permalink,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPostsByType = `-- name: ListPostsByType :many
SELECT id, type, visible, title, subtitle, content, slug, permalink, created FROM posts 
WHERE type = ? AND visible = ? 
ORDER BY created DESC 
LIMIT ? OFFSET ?
`

type ListPostsByTypeParams struct {
	Type    sql.NullString `json:"type"`
	Visible sql.NullBool   `json:"visible"`
	Limit   int64          `json:"limit"`
	Offset  int64          `json:"offset"`
}

func (q *Queries) ListPostsByType(ctx context.Context, arg ListPostsByTypeParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, ListPostsByType,
		arg.Type,
		arg.Visible,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Visible,
			&i.Title,
			&i.Subtitle,
			&i.Content,
			&i.Slug,
			&i.Permalink,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchPosts = `-- name: SearchPosts :many
SELECT id, type, visible, title, subtitle, content, slug, permalink, created FROM posts 
WHERE visible = ? 
AND (title LIKE ? OR subtitle LIKE ? OR content LIKE ?)
ORDER BY created DESC 
LIMIT ? OFFSET ?
`

type SearchPostsParams struct {
	Visible  sql.NullBool   `json:"visible"`
	Title    string         `json:"title"`
	Subtitle sql.NullString `json:"subtitle"`
	Content  string         `json:"content"`
	Limit    int64          `json:"limit"`
	Offset   int64          `json:"offset"`
}

func (q *Queries) SearchPosts(ctx context.Context, arg SearchPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, SearchPosts,
		arg.Visible,
		arg.Title,
		arg.Subtitle,
		arg.Content,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Visible,
			&i.Title,
			&i.Subtitle,
			&i.Content,
			&i.Slug,
			&i.Permalink,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePost = `-- name: UpdatePost :one
UPDATE posts 
SET 
    type = COALESCE(?, type),
    visible = COALESCE(?, visible),
    title = COALESCE(?, title),
    subtitle = COALESCE(?, subtitle),
    content = COALESCE(?, content),
    slug = COALESCE(?, slug),
    permalink = COALESCE(?, permalink)
WHERE id = ?
RETURNING id, type, visible, title, subtitle, content, slug, permalink, created
`

type UpdatePostParams struct {
	Type      sql.NullString `json:"type"`
	Visible   sql.NullBool   `json:"visible"`
	Title     string         `json:"title"`
	Subtitle  sql.NullString `json:"subtitle"`
	Content   string         `json:"content"`
	Slug      string         `json:"slug"`
	Permalink string         `json:"permalink"`
	ID        string         `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, UpdatePost,
		arg.Type,
		arg.Visible,
		arg.Title,
		arg.Subtitle,
		arg.Content,
		arg.Slug,
		arg.Permalink,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Visible,
		&i.Title,
		&i.Subtitle,
		&i.Content,
		&i.Slug,
		&i.Permalink,
		&i.Created,
	)
	return i, err
}
