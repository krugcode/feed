// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contexts.sql

package queries

import (
	"context"
	"database/sql"
)

const AddPostToContext = `-- name: AddPostToContext :one
INSERT INTO context_posts (
    id, post_id, context_id, created
) VALUES (
    ?, ?, ?, ?
) RETURNING id, post_id, context_id, created
`

type AddPostToContextParams struct {
	ID        string       `json:"id"`
	PostID    string       `json:"post_id"`
	ContextID string       `json:"context_id"`
	Created   sql.NullTime `json:"created"`
}

func (q *Queries) AddPostToContext(ctx context.Context, arg AddPostToContextParams) (ContextPost, error) {
	row := q.db.QueryRowContext(ctx, AddPostToContext,
		arg.ID,
		arg.PostID,
		arg.ContextID,
		arg.Created,
	)
	var i ContextPost
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.ContextID,
		&i.Created,
	)
	return i, err
}

const CreateContext = `-- name: CreateContext :one
INSERT INTO contexts (
    id, title, description, context_description_post_id, created
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING id, title, description, context_description_post_id, created
`

type CreateContextParams struct {
	ID                       string       `json:"id"`
	Title                    string       `json:"title"`
	Description              string       `json:"description"`
	ContextDescriptionPostID *string      `json:"context_description_post_id"`
	Created                  sql.NullTime `json:"created"`
}

func (q *Queries) CreateContext(ctx context.Context, arg CreateContextParams) (Context, error) {
	row := q.db.QueryRowContext(ctx, CreateContext,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.ContextDescriptionPostID,
		arg.Created,
	)
	var i Context
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ContextDescriptionPostID,
		&i.Created,
	)
	return i, err
}

const DeleteContext = `-- name: DeleteContext :exec
DELETE FROM contexts WHERE id = ?
`

func (q *Queries) DeleteContext(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteContext, id)
	return err
}

const GetContext = `-- name: GetContext :one
SELECT id, title, description, context_description_post_id, created FROM contexts WHERE id = ?
`

func (q *Queries) GetContext(ctx context.Context, id string) (Context, error) {
	row := q.db.QueryRowContext(ctx, GetContext, id)
	var i Context
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ContextDescriptionPostID,
		&i.Created,
	)
	return i, err
}

const GetContextByTitle = `-- name: GetContextByTitle :one
SELECT id, title, description, context_description_post_id, created FROM contexts WHERE title = ?
`

func (q *Queries) GetContextByTitle(ctx context.Context, title string) (Context, error) {
	row := q.db.QueryRowContext(ctx, GetContextByTitle, title)
	var i Context
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ContextDescriptionPostID,
		&i.Created,
	)
	return i, err
}

const GetContextPosts = `-- name: GetContextPosts :many
SELECT p.id, p.type, p.visible, p.title, p.subtitle, p.content, p.slug, p.permalink, p.created FROM posts p
JOIN context_posts cp ON p.id = cp.post_id
WHERE cp.context_id = ?
ORDER BY p.created DESC
`

func (q *Queries) GetContextPosts(ctx context.Context, contextID string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, GetContextPosts, contextID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Visible,
			&i.Title,
			&i.Subtitle,
			&i.Content,
			&i.Slug,
			&i.Permalink,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListContexts = `-- name: ListContexts :many
SELECT id, title, description, context_description_post_id, created FROM contexts 
ORDER BY created DESC 
LIMIT ? OFFSET ?
`

type ListContextsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListContexts(ctx context.Context, arg ListContextsParams) ([]Context, error) {
	rows, err := q.db.QueryContext(ctx, ListContexts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Context{}
	for rows.Next() {
		var i Context
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ContextDescriptionPostID,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemovePostFromContext = `-- name: RemovePostFromContext :exec
DELETE FROM context_posts 
WHERE context_id = ? AND post_id = ?
`

type RemovePostFromContextParams struct {
	ContextID string `json:"context_id"`
	PostID    string `json:"post_id"`
}

func (q *Queries) RemovePostFromContext(ctx context.Context, arg RemovePostFromContextParams) error {
	_, err := q.db.ExecContext(ctx, RemovePostFromContext, arg.ContextID, arg.PostID)
	return err
}

const SearchContexts = `-- name: SearchContexts :many
SELECT id, title, description, context_description_post_id, created FROM contexts 
WHERE title LIKE ? OR description LIKE ?
ORDER BY created DESC 
LIMIT ? OFFSET ?
`

type SearchContextsParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Limit       int64  `json:"limit"`
	Offset      int64  `json:"offset"`
}

func (q *Queries) SearchContexts(ctx context.Context, arg SearchContextsParams) ([]Context, error) {
	rows, err := q.db.QueryContext(ctx, SearchContexts,
		arg.Title,
		arg.Description,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Context{}
	for rows.Next() {
		var i Context
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ContextDescriptionPostID,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateContext = `-- name: UpdateContext :one
UPDATE contexts 
SET 
    title = COALESCE(?, title),
    description = COALESCE(?, description),
    context_description_post_id = COALESCE(?, context_description_post_id)
WHERE id = ?
RETURNING id, title, description, context_description_post_id, created
`

type UpdateContextParams struct {
	Title                    string  `json:"title"`
	Description              string  `json:"description"`
	ContextDescriptionPostID *string `json:"context_description_post_id"`
	ID                       string  `json:"id"`
}

func (q *Queries) UpdateContext(ctx context.Context, arg UpdateContextParams) (Context, error) {
	row := q.db.QueryRowContext(ctx, UpdateContext,
		arg.Title,
		arg.Description,
		arg.ContextDescriptionPostID,
		arg.ID,
	)
	var i Context
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ContextDescriptionPostID,
		&i.Created,
	)
	return i, err
}
