// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: links.sql

package queries

import (
	"context"
	"database/sql"
)

const CreateLink = `-- name: CreateLink :one
INSERT INTO links (
    id, title, is_local_href, href, image_url, find_out_more_href, 
    click_count, is_visible, "order", created
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, title, is_local_href, href, image_url, find_out_more_href, click_count, is_visible, "order", created
`

type CreateLinkParams struct {
	ID              string         `json:"id"`
	Title           sql.NullString `json:"title"`
	IsLocalHref     sql.NullBool   `json:"is_local_href"`
	Href            sql.NullString `json:"href"`
	ImageUrl        sql.NullString `json:"image_url"`
	FindOutMoreHref sql.NullString `json:"find_out_more_href"`
	ClickCount      sql.NullInt64  `json:"click_count"`
	IsVisible       sql.NullBool   `json:"is_visible"`
	Order           sql.NullInt64  `json:"order"`
	Created         sql.NullTime   `json:"created"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, CreateLink,
		arg.ID,
		arg.Title,
		arg.IsLocalHref,
		arg.Href,
		arg.ImageUrl,
		arg.FindOutMoreHref,
		arg.ClickCount,
		arg.IsVisible,
		arg.Order,
		arg.Created,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsLocalHref,
		&i.Href,
		&i.ImageUrl,
		&i.FindOutMoreHref,
		&i.ClickCount,
		&i.IsVisible,
		&i.Order,
		&i.Created,
	)
	return i, err
}

const DeleteLink = `-- name: DeleteLink :exec
DELETE FROM links WHERE id = ?
`

func (q *Queries) DeleteLink(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteLink, id)
	return err
}

const GetLink = `-- name: GetLink :one
SELECT id, title, is_local_href, href, image_url, find_out_more_href, click_count, is_visible, "order", created FROM links WHERE id = ?
`

func (q *Queries) GetLink(ctx context.Context, id string) (Link, error) {
	row := q.db.QueryRowContext(ctx, GetLink, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsLocalHref,
		&i.Href,
		&i.ImageUrl,
		&i.FindOutMoreHref,
		&i.ClickCount,
		&i.IsVisible,
		&i.Order,
		&i.Created,
	)
	return i, err
}

const IncrementLinkClicks = `-- name: IncrementLinkClicks :exec
UPDATE links 
SET click_count = click_count + 1 
WHERE id = ?
`

func (q *Queries) IncrementLinkClicks(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, IncrementLinkClicks, id)
	return err
}

const ListAllLinks = `-- name: ListAllLinks :many
SELECT id, title, is_local_href, href, image_url, find_out_more_href, click_count, is_visible, "order", created FROM links 
ORDER BY "order", created DESC 
LIMIT ? OFFSET ?
`

type ListAllLinksParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListAllLinks(ctx context.Context, arg ListAllLinksParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, ListAllLinks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsLocalHref,
			&i.Href,
			&i.ImageUrl,
			&i.FindOutMoreHref,
			&i.ClickCount,
			&i.IsVisible,
			&i.Order,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListVisibleLinks = `-- name: ListVisibleLinks :many
SELECT id, title, is_local_href, href, image_url, find_out_more_href, click_count, is_visible, "order", created FROM links 
WHERE is_visible = true 
ORDER BY "order", created DESC
`

func (q *Queries) ListVisibleLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, ListVisibleLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsLocalHref,
			&i.Href,
			&i.ImageUrl,
			&i.FindOutMoreHref,
			&i.ClickCount,
			&i.IsVisible,
			&i.Order,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateLink = `-- name: UpdateLink :one
UPDATE links 
SET 
    title = COALESCE(?, title),
    is_local_href = COALESCE(?, is_local_href),
    href = COALESCE(?, href),
    image_url = COALESCE(?, image_url),
    find_out_more_href = COALESCE(?, find_out_more_href),
    click_count = COALESCE(?, click_count),
    is_visible = COALESCE(?, is_visible),
    "order" = COALESCE(?, "order")
WHERE id = ?
RETURNING id, title, is_local_href, href, image_url, find_out_more_href, click_count, is_visible, "order", created
`

type UpdateLinkParams struct {
	Title           sql.NullString `json:"title"`
	IsLocalHref     sql.NullBool   `json:"is_local_href"`
	Href            sql.NullString `json:"href"`
	ImageUrl        sql.NullString `json:"image_url"`
	FindOutMoreHref sql.NullString `json:"find_out_more_href"`
	ClickCount      sql.NullInt64  `json:"click_count"`
	IsVisible       sql.NullBool   `json:"is_visible"`
	Order           sql.NullInt64  `json:"order"`
	ID              string         `json:"id"`
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, UpdateLink,
		arg.Title,
		arg.IsLocalHref,
		arg.Href,
		arg.ImageUrl,
		arg.FindOutMoreHref,
		arg.ClickCount,
		arg.IsVisible,
		arg.Order,
		arg.ID,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsLocalHref,
		&i.Href,
		&i.ImageUrl,
		&i.FindOutMoreHref,
		&i.ClickCount,
		&i.IsVisible,
		&i.Order,
		&i.Created,
	)
	return i, err
}
