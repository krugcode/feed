// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package queries

import (
	"context"
	"database/sql"
)

const AddTagToPost = `-- name: AddTagToPost :one
INSERT INTO post_tags (
    id, post_id, tag_id, created
) VALUES (
    ?, ?, ?, ?
) RETURNING id, post_id, tag_id, created
`

type AddTagToPostParams struct {
	ID      string       `json:"id"`
	PostID  string       `json:"post_id"`
	TagID   string       `json:"tag_id"`
	Created sql.NullTime `json:"created"`
}

func (q *Queries) AddTagToPost(ctx context.Context, arg AddTagToPostParams) (PostTag, error) {
	row := q.db.QueryRowContext(ctx, AddTagToPost,
		arg.ID,
		arg.PostID,
		arg.TagID,
		arg.Created,
	)
	var i PostTag
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.TagID,
		&i.Created,
	)
	return i, err
}

const CreateTag = `-- name: CreateTag :one
INSERT INTO tags (
    id, title, searched_count, created
) VALUES (
    ?, ?, ?, ?
) RETURNING id, title, searched_count, created
`

type CreateTagParams struct {
	ID            string        `json:"id"`
	Title         string        `json:"title"`
	SearchedCount sql.NullInt64 `json:"searched_count"`
	Created       sql.NullTime  `json:"created"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, CreateTag,
		arg.ID,
		arg.Title,
		arg.SearchedCount,
		arg.Created,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SearchedCount,
		&i.Created,
	)
	return i, err
}

const DeleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteTag, id)
	return err
}

const GetPopularTags = `-- name: GetPopularTags :many
SELECT id, title, searched_count, created FROM tags 
WHERE searched_count > 0
ORDER BY searched_count DESC 
LIMIT ?
`

func (q *Queries) GetPopularTags(ctx context.Context, limit int64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, GetPopularTags, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SearchedCount,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPostTags = `-- name: GetPostTags :many
SELECT t.id, t.title, t.searched_count, t.created FROM tags t
JOIN post_tags pt ON t.id = pt.tag_id
WHERE pt.post_id = ?
ORDER BY t.title
`

func (q *Queries) GetPostTags(ctx context.Context, postID string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, GetPostTags, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SearchedCount,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTag = `-- name: GetTag :one
SELECT id, title, searched_count, created FROM tags WHERE id = ?
`

func (q *Queries) GetTag(ctx context.Context, id string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, GetTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SearchedCount,
		&i.Created,
	)
	return i, err
}

const GetTagByTitle = `-- name: GetTagByTitle :one
SELECT id, title, searched_count, created FROM tags WHERE title = ?
`

func (q *Queries) GetTagByTitle(ctx context.Context, title string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, GetTagByTitle, title)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SearchedCount,
		&i.Created,
	)
	return i, err
}

const GetTagPosts = `-- name: GetTagPosts :many
SELECT p.id, p.type, p.visible, p.title, p.subtitle, p.content, p.slug, p.permalink, p.created FROM posts p
JOIN post_tags pt ON p.id = pt.post_id
WHERE pt.tag_id = ? AND p.visible = true
ORDER BY p.created DESC
`

func (q *Queries) GetTagPosts(ctx context.Context, tagID string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, GetTagPosts, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Visible,
			&i.Title,
			&i.Subtitle,
			&i.Content,
			&i.Slug,
			&i.Permalink,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const IncrementTagSearchCount = `-- name: IncrementTagSearchCount :exec
UPDATE tags 
SET searched_count = searched_count + 1 
WHERE id = ?
`

func (q *Queries) IncrementTagSearchCount(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, IncrementTagSearchCount, id)
	return err
}

const ListTags = `-- name: ListTags :many
SELECT id, title, searched_count, created FROM tags 
ORDER BY searched_count DESC, title ASC 
LIMIT ? OFFSET ?
`

type ListTagsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListTags(ctx context.Context, arg ListTagsParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, ListTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SearchedCount,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemoveTagFromPost = `-- name: RemoveTagFromPost :exec
DELETE FROM post_tags 
WHERE post_id = ? AND tag_id = ?
`

type RemoveTagFromPostParams struct {
	PostID string `json:"post_id"`
	TagID  string `json:"tag_id"`
}

func (q *Queries) RemoveTagFromPost(ctx context.Context, arg RemoveTagFromPostParams) error {
	_, err := q.db.ExecContext(ctx, RemoveTagFromPost, arg.PostID, arg.TagID)
	return err
}

const SearchTags = `-- name: SearchTags :many
SELECT id, title, searched_count, created FROM tags 
WHERE title LIKE ?
ORDER BY searched_count DESC, title ASC 
LIMIT ? OFFSET ?
`

type SearchTagsParams struct {
	Title  string `json:"title"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

func (q *Queries) SearchTags(ctx context.Context, arg SearchTagsParams) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, SearchTags, arg.Title, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SearchedCount,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTag = `-- name: UpdateTag :one
UPDATE tags 
SET 
    title = COALESCE(?, title),
    searched_count = COALESCE(?, searched_count)
WHERE id = ?
RETURNING id, title, searched_count, created
`

type UpdateTagParams struct {
	Title         string        `json:"title"`
	SearchedCount sql.NullInt64 `json:"searched_count"`
	ID            string        `json:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, UpdateTag, arg.Title, arg.SearchedCount, arg.ID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SearchedCount,
		&i.Created,
	)
	return i, err
}
